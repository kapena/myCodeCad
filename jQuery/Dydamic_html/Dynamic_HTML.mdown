##Creating HTML Elements
Dynamically adding elements to our HTML page is a powerful tool—it lets us modify not only the formatting, but the actual structure of our websites in response to a user's actions. For example, when you get a Gchat, each message is actually a new `<div>` being dynamically added to the page. 

If you think about it, we've sort of done this already: all we're doing is setting a variable equal to a jQuery object. In this case, however, instead of just having something like:

`$p = $('p');`

We'll want to pass in an entire HTML element in quotes:

`$p = $("<p>I'm a new paragraph!</p>");`
When we put text in quotes like this, we call it a string (as in a "string of characters"). From now on, when we say "string," you can think "text" or "phrase." Strings are always in single or double quotes.

###Instructions 1 / 14
In `script.js`, create a variable, `$h1`, and set it equal to a jQuery object containing an`<h1>`tag with the text "Hello". The tag should be a string.

`var $h1 = $('<h1>Hello</h1>');`

##Inserting Elements
We can insert our newly created elements using a few jQuery actions.

`.append()` inserts the specified element as the last child of the target element. `.prepend()` inserts the specified element as the first child of the target element. If we have a `div` of class `.info`,

`$('.info').append('<p>Stuff</p>');`
`$('.info').prepend('<p>Stuff</p>');`

`.append()` *inserts the specified element as the last child of the target elemenet*

`.prepend()`*inserts the specified element as the the first child of the target element*

`.appendTo()` does the same as `.append()`, but it just reverses the order of "what to add" and "where to add it." The code:

`$('<p>Stuff</p>').appendTo('.info');`

`.appendTo()` *reverses the order of what you want to add*
`prependTo()` *the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.*

###Instructions 2 / 14 
In the `script.js` tab, go ahead and `.append()` a paragraph to the body of your HTML document. Your paragraph should contain the text: "I'm a paragraph!"

```javascript
$(document).ready(function(){
  $('body').append('<p>I\'m a paragraph!</p>');
});
```
##Before and After
We can specify where in the DOM we insert an element with the `.before()` and `.after()` functions. The syntax looks like this:

`$('target').after('<tag>To Add</tag>');`

Where 'target' is the element after which you want to add something and the bit between `<tag>`s is the HTML element you want to add. You can add `<h1>`s, `<div>`s, or any other valid HTML you like.

###Instructions 3 / 14 
Go ahead and add a`<p>`tag`.after()`the`<div>`with the ID `#one`.You can place any text you like in your`<p>`tag.

```javascript
$(document).ready(function () {
  //  inserting a paragraph of text after the `<div>` with the id of `#one`
  $('#one').after('<p>Dusty is a good dog!</p>');
});
```
##Moving Elements Around
Moving elements around in the DOM is a snap—all we need to do is use the jQuery functions we just learned on existing elements instead of creating new ones.

```javascript
var $paragraph = $('p'); // paragraph element 
$('div').after($paragraph); // moving paragraph 

// Is the same as this 
$('div').after($('p'));
```

1. We can select an element using `$("p")` and assign it to a variable

2. We can move the position in the DOM by using the variable in our `after()` statement

*Note: This does not copy the element from one location to another, it moves the original element effectively saving you from having to delete the original*

###Instructions 4 / 14 
In script.js, add a new line below your code to move your`<p>`tag after the`<div>`with id`#one` Once this is done then create a new jQuery selector that targets the`<div>`with the id`#two`

Using after again, select the`<p>`tag you created and move it after the`<div>`with id`#two`

```javascript
$(document).ready(function () {
// inserting a paragraph of text after the <div> with the id of `#one`
  $('#one').after('<p>Dusty is a good dog!</p>');
  $('#one').after($('p')); // Moving our paragraph under <div> `one` 
  $('#two').after($('p')); // Moving our paragraph under <div> `two` 
});
```

##Removing Elements
Adding elements to our HTML documents is great, but without the ability to remove them, our pages can quickly become cluttered. Thankfully, we have two jQuery functions, `.empty()` and `.remove()`, that help us delete content from our pages.

`.empty()` deletes an element's content and all its descendants. For instance, if you`.empty()`an`'ol'`,you'll also remove all its`'li's`and their text.

`.remove()`, not only deletes an element's content, but deletes the element itself.

###Instructions 5 / 14
Go ahead and `.remove()` your`<p>`tag from the HTML document.

```javascript
$(document).ready(function(){
  $('#one').after('<p>Dusty is a good dog!</p>');
  $('#one').after($('p'));
  $('#two').after($('p'));

  // removeing the <p> tag
  $('p').remove();
});

```
##Adding and Removing Classes
We don't have to limit ourselves to adding or removing entire elements, though—we can fine-tune our jQuery superpowers to alter classes, CSS, and even the contents of our HTML elements.

Let's start with classes. jQuery includes two functions, `.addClass()` and `.removeClass()`, that can be used to add or remove a class from an element. This is great if, for example, you have a highlighted class that you want to apply to an element when clicked.

```javascript
$('selector').addClass('className');
$('selector').removeClass('className');
```
where 'selector' is the HTML element you want and 'className' is the class name you want to add or remove.

Remember: You aren't selecting anything, **you are modifying your element**. This means that you do not need `#` or . before your class.

###Instructions 6 / 14 
Now that we think of it, that highlighted class seems like a great idea. We've supplied the HTML and CSS; in the script.js tab, add the jQuery code necessary to make your `#text` div highlighted when clicked!

```javascript
$(document).ready(function () {
  // adding the click handel and attching it to the #text div
  $('#text').click(function(){
    // adding the class highlighted and using `this` to refferance out click function
    $(this).addClass('highlighted');
  });
});
```
##Toggling Classes
What if we want to toggle a class back and forth, though? That is, what if we want jQuery to automatically check to see whether our `#text` is .highlighted, so that when we click on it, it adds the class if it isn't there and removes it if it is?

As you probably guessed, jQuery includes a `.toggleClass()` function that does exactly this. If the element it's called on has the class it receives as an input, `.toggleClass()` removes that class; if the target element doesn't have that class, `.toggleClass()` adds it.

###Instructions 7 / 14 
Change your `.addClass()` to a `.toggleClass()`. Click on your `#text` a bunch of times. See how it turns the highlighting on and off?

```javascript
$(document).ready(function () {
  // adding the click handel and attching it to the #text div
  $('#text').click(function(){
  // toggleClass() turns the class on and off
  $(this).toggleClass('highlighted');
  });
});
```
##Changing Your Style
What if we want to fine-tune individual CSS property values, though? Remember `style="height:300px;` `width:300px;`"? jQuery makes it a snap!

Because resizing elements is so common, jQuery has specific `.height()` and `.width()` functions that can be used to change the heights and widths of HTML elements. For instance:

```javascript
$('div').height('100px');
$('div').width('100px');
```

this would give all`<div>`s on the page a height of 100 pixels and a width of 50 pixels.

jQuery also includes a general-purpose`css()`function that takes two inputs: the first is the CSS element to alter, and the second is the value to set it to. For example:

```javascript
$("div").css("background-color","#008800");
```

would give all`<div>`s on the page a green background color. You can modify any element's CSS attributes this way.

### Instructions 8 / 14 
Let's get some practice in. Change the`<div>`in our HTML document so it has a height of `200` pixels, a width of `200` pixels, and a border-radius of `10` pixels. Let's make this happen immediately, without the need for a click.

```javascript
$(document).ready(function(){
  // modifing a div to a new width, height and border border-radius
  $('div').width('200px');
  $('div').height('200px');
  $('div').css('border-radius','10px');
});
```
##Modifying Content
Finally, we can update the contents of our HTML elements—that is, the bit between the opening and closing tags—using the `.html()` and `.val()` functions.

`.html()` can be used to set the contents of the first element match it finds. For instance,`$('div').html();`will get the HTML contents of the first `div` it finds, and`$('div').html('I love jQuery');`will set the contents of the first `div` it finds to "I love jQuery!"

`.val()` is used to get the value of form elements. For example,
`$('input:checkbox:checked').val();` would get the value of the first checked checkbox that jQuery finds.

###Instructions 9 / 14
We've added a paragraph to our HTML document. Use the `.html()` function to set its text to "jQuery magic in action!" (Don't forget the exclamation point!)

```javascript
$(document).ready(function(){
  // adding a pararagraph
  $('p').html('jQuery is awesome!');
});
```
##Set Up
All right! It's time to apply our newfound knowledge. In this section, we'll build an interactive "to do" list that will add items to a checklist and remove them as they're checked off.

###Instructions 10 / 14 
You know the drill. Get your `document .ready()!

###Click Da Button! Do It Naoughw!
You'll notice we've set up an HTML form for grabbing the user's input. We'll need to store the user's input in a `variable`, which will allow us to append that input to the body of the HTML document later on.

You can set a variable equal to the contents of the input field using .`val()`, like so: `var input = $('input[name=checkListItem]').val();`

**How dose this work**
Our selector finds our specific input using a `css` selector on our `checkListItem` input. We then  call `val()` to get the value of the field!

###Instructions 11 / 14
1. Let's create a `.click()` event handler for our `#button` element

2. Make sure you pass it a `function(){}`

3. Inside your `function(){}` create the variable `toAdd` and set it equal to the contents of the input field.

```javascript
$(document).ready(function(){
  // click event for button element
  $('button').click(function(){
    // variable named toAdd which is set to the contents of the imput field
    var toAdd = $('input[name=checkListItem]').val(); 
  });
});
```

##Append to Body
Perfect! Now we want to add our HTML element to the document. We can do this using our handy `.append()` function.

Let's go ahead and append to our div with the `.list` class. We'll append a `<div>` with `class="item"`, since we'll want a way to target our appended `<div>`s later when we remove them. (A "to do" list is no good if we can't check things off it.)

We'll want the contents of our `div` to be the contents of our input field, which we saved in the variable `toAdd`. That means when we append, we'll want to append

`<div class="item">' + toAdd + '</div>'`

###Instructions 12 / 14 
Go ahead and `.append()` a `<div>` with `class="item"` to the `.list` div of your HTML document, then MAKE SURE to click your button to add an item—the exercise will wait for you to do so!

```javascript
$(document).ready(function(){
  $('#button').click (function(){
    // variable named toAdd which is set to the contents of the imput field
    var toAdd = $('input[name=checkListItem]').val(); 
      // appending a div class named `item` to our class `list` we then use `item` div to contain the contents of the input field which is stored in the toAdd variable
  $('.list').append('<div class="item">' + toAdd + '</div>');
  // remove whats been clicked

  });
});
```
##Remove What's Been Clicked
Great job! Finally, we want to be able to check items off our list.

You might think we could do this:
```javascript
$('item').click(function(){
  $(this).remove();
});
```
Which is that's not a bad idea. The problem is that it won't work—jQuery looks for all the `.items` when the DOM is loaded, so by the time your document is ready, it's already decided there are no `.items` to `.remove()`, and your code won't work.

For this, we'll need a new event handler: `.on()`. You can think of `.on()` as a general handler that takes the event, its selector, and an action as inputs. The syntax looks like this:

```javascript
$(document).on('event','selector',function(){
  // Do something 
});

```
In this case, 'event' will be `'click'`, 'selector' will be `'.item'`, and the thing we'll want to do is call `.remove()` on this.

###Instructions 13 / 14 
Complete your program by adding the .on() event handler as described above. It should go inside your $(document).ready(), but after and outside your `$('#button').click()`.

```javascript
$(document).ready(function(){
  $('#button').click (function(){
    //  toAdd which is set to the contents of the imput field
    var toAdd = $('input[name=checkListItem]').val(); 
      // appending a div class named `item` to our class `list` we then use `item` div to contain the contents of the input field which is stored in the toAdd variable
  $('.list').append('<div class="item">' + toAdd + '</div>');
  });
  // `on()` is an event handeler called which contains a click method on the `.item` class
  $(document).on('click','.item',function(){
    // here we are using `this` to refferance our `on` event handeler which then removes the item that is clicked upon 
    $(this).remove();
    });
  });
```
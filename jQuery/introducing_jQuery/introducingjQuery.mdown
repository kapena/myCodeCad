##Introducting jQuery 
You can access each file by refferancing the lesson numbers

###See It to Believe It 
####Introdunction_1/13
So far, we've built web pages using HTML and styled them using CSS. Our pages look great, but they're not interactive —we can't drag elements around the page, open and close sliding panels, animate HTML elements, or add new elements to our HTML pages simply by clicking a button.

All that's about to change, though. In this track, you're going to learn **jQuery**, which will allow you to do all these things and more.

###The Document Object Model
####Introdunction_jQuery file 
To get the most out of jQuery, we should review how an HTML page is put together.

An HTML document is structured according to the *Document Object Model*, or **DOM**. It's by interacting with the DOM that jQuery is able to access and modify HTML.

The DOM consists of every element on the page, laid out in a hierarchical way that reflects the way the HTML document is ordered. Remember how we could think of the HTML document as a tree? You can think of the DOM the same way. Just as with an HTML document, elements in the DOM can have *parents, children, and siblings*.

If you're a little hazy on what an HTML element is, what a CSS selector is, or what IDs and classes are, feel free to review these in the HTML and CSS track.

####2/13 Instructions
Check out the code in `script.js`. We'll explain the code more soon, but for now the main idea is that when the HTML document loads, the code will select an HTML element and make it disappear.

We'll want to target the `div` element here, so on line 2 inside the `$( )`, add "div".

    ```JavaScript 
    $(document).ready(function(){
      $('div').fadeOut(1000);
    });
    ```

###Changing Targets

Don't be intimidated by the amount of code you're seeing—we'll go through it piece by piece to make sure you understand it thoroughly.

Just like the CSS `div` refers to the HTML element `<div>`, the jQuery 'div' refers to the same HTML element `<div>`. You can think of the element name passed to jQuery as identical to the CSS element, only wrapped in quotes. So, for instance, you could target anything of class button with
`$('.button').someAction`

####3/13 Instructions

As you'll remember, `.button` in your CSS file is how you'd target anything of `class="button"` in your HTML file.

    ```JavaScript 
    $(document).ready(function(){
      $('#green').fadeOut(1000);
    });
    ```
###What is jQuery?
jQuery is a library, or set of helpful add-ons, to the JavaScript programming language. It may seem counterintuitive to learn how to use a library before learning the actual language, but there are a few good reasons for this.

1. jQuery is much better at giving you immediate, visual results than regular JavaScript. By the end of this lesson, you'll have built your own interactive button!

####4/13 Instructions

On the `script.js` tab, add the missing pieces on line 2 so that your jQuery code calls `fadeOut` on the `div` with the ID `#notready`.

    ```JavaScript
    $(document).ready(function(){
      // fades out the green square
      $('#notready').fadeOut(1000);
    });
    ```
###Linking Your HTML and JavaScript Files
Great! Now we need to link our HTML page to our jQuery script so our jQuery magic will affect our HTML.

Just like we need a `<link>` tag to connect our HTML and CSS, we need a `<script>` tag to connect our HTML and jQuery. The tag looks like this:

`<script type="text/javascript" src="script.js"></script>`
Note that the <script> tag is not self-closing; it requires a closing </script> tag.

####5/13 Instructions 
Add a `<script>` tag to `index.html`. Its type should be "text/javascript" and its src should be "script.js".

`<script type="text/javascript" src="script.js"></script>`

### Getting Started
Next, we'll need to start up our jQuery magic using the `$(document).ready(); `syntax you've seen. It works like this:

`$() says`, "hey, jQuery things are about to happen!"

Putting document between the parentheses tells us that we're about to work our magic on the HTML document itself.

`.ready();` is a function, or basic action, in jQuery. It says "hey, I'm going to do stuff as soon as the HTML document is ready!"

Whatever goes in `.ready()`'s parentheses is the jQuery event that occurs as soon as the HTML document is ready.
So,`$(document).ready(something);`
says: "when the HTML document is ready, do something!" (We'll show you how to replace something with an action in the next exercise.)

Note that `.ready();` ends with a semicolon. This tells jQuery that you're done giving it a command.

#### 5/13 Instructions
Add a `$(document).ready();` call in `script.js`. Remember, the document is special: it's not an HTML element like <p> or <div>, so it doesn't go in quotes.

    ```JavaScript
    $(document).ready();
    ```

###The functional approach
Perfect! Now we need to put something inside our ready() function.

Remember, when we say "function," you can think "action." Functions are the basic unit of doing work in jQuery.

For this reason, jQuery includes a function keyword. The syntax looks like this:

    ```JavaScipt
    function(){
        jQuery magic;
    }
    ```
If we add our function inside our `.ready()`, jQuery will run the code in our function as soon as the HTML document loads. The syntax would then look like this:

    ```JavaScript
    $(document).ready(function() {
        jQuery magic;
    });
    ```
Remember, we end our jQuery statements with a semicolon!

#### 7 / 13 Instructions
Place a `function(){}` inside your `.ready()`. You don't need to put anything inside your function's curly braces `({})` yet—we'll get to that in the next exercise.

    ```JavaScript
    $(document).ready(function(){
      //body
      });
    ```
###Electr(on)ic Slide
Almost there! Now we just need to include an action in the body of our function. In this case, we'll make a header `div` for our HTML page slide into view.

Between the `{}`s of our `function()`, we'll want to turn our `div` into a jQuery object so jQuery can manipulate it. Much like we use `.ready()` on `$(document)`, we'll use the `.slideDown()` action on our div jQuery object.

Inside `.slideDown`'s parentheses, we'll want to tell it how quickly to slide down. Let's enter `'slow'`(include the quotes).


#### 8 / 13 Instructions
On line 2 in `script.js`, make `'div'` into a jQuery object and call the `.slideDown()` action on it. Inside `slideDown()`'s parentheses, type 'slow' so jQuery knows how quickly to slide your div down.


    ```JavaScript
    $(document).ready(function(){
      $('div').slideDown('slow');
    });
    ```
###At the Ready!
All right! Let's get started

####10 / 13 Instructions
In your index.html tab, add a `<script>` tag to connect your HTML to `script.js.`In your script.js tab, put document into a jQuery object and call .ready().

    ```JavaScript
    $(document).ready();
    ```

`<script type="text/javascript" src="js/script.js"></script>`

###Get Yourself In...
Great! Next, let's include our function keyword and two new actions together, `mouseenter()` and `fadeTo()`.

`mouseenter()` does what you might expect: it produces a change when your mouse enters a given HTML element. For example,

    ```JavaScript
    $(doucument).ready(function(){
      $('div').mouseenter(function(){
       ('div').hide();
      });
    });
    ```
would hide every `<div>` on the page as soon as you mouse over one. (We'll find out how to affect just one `<div>` among many in the next lesson.) For now, we only have one `<div>`, so this setup is okay.

*Instead* of `hide()`, however, we'll place `fadeTo()` inside `mouseenter()`. `fadeTo()` takes two **arguments**, or **inputs**, between its parentheses, separated by a comma: the speed at which to fade, and the opacity (or transparency) to fade to. For example,

`fadeTo('fast',0.25);`

#### 11 / 13 Instructions

Using the examples above, make it so your 'div' fades to 1 (100%) opacity when your mouse enters the 'div'. Make the animation speed 'fast'. (Make sure to give `fadeTo()` its inputs in order—speed, then opacity.)

    ```JavaScript
    $(document).ready(function(){
      // mouseenter dectects a mouse over
      $('div').mouneenter(function(){
      // fadeTo allows for the color to fade when our mouse hovers over the 'div'
      $('div').fadeTo('fast',1)
      });
    });
    ```
####...and Get Yourself Out!
Excellent! Your button looks great now—it stands out when the user mouses over it.

However, you'll notice that when you take your cursor off the button, it stays dark. What we really want is for our button to become light again when our mouse leaves.

You might have guessed that jQuery includes a `mouseleave()` action. If so, you're right! (If you're curious, you can learn more about these actions in the jQuery documentation.)

#### 12 / 13 Instructions
Between the `});` that ends your `mouseenter()` and the `});` that ends your `$(document).ready()`, add a `mouseleave()` that uses fadeTo to return your div's opacity to `0.5.` Like the previous fadeTo, it should have 'fast' as its first input.

    ```JavaScript
    $(document).ready(function(){
      // Inside mouseenter(). fadeTo() takes two arguments, or inputs, between its parentheses, separated by a comma: the speed at which to fade, and the opacity (or transparency) to fade to. 
      $('div').mouseenter(function(){
        $('div').fadeTo('fast',1);

        $('div').mouseleave(function(){
          $('div').fadeTo('fast',0.25);
        });
      });
    });
    ```
## You know this
You already know a lot about jQuery effects, so let's try a training wheels-free exercise. You can do this! We believe in you.

### Instructions 1 / 14
Write the necessary jQuery code to `.hide()` your 'div' as soon as the HTML document is ready.

```javascript
$(document).ready(function() {
  $('div').hide();
  body...
});
```
## More Practice with .animate()

Let's get in a little more practice with the `.animate()` effect. That's the one with the slightly more complicated input—if we wanted to move a div 10 pixels down, we'd type something like

`$(div).animate({top:'+=10px'},500);`

Where the bit between curly braces says "hey, jQuery! Add 10 pixels to the current top margin," and the second input says "do it in 500 milliseconds!" (1,000 milliseconds = one second.)

### Instructions 2 / 14
Going down?

1. Let's begin begin by targeting our image inside `$()`
2. Then let's animate our image to go down by `100px`
3. Let's make it happen in 1 second or `1000` milliseconds

```javascript
$(document).ready(function() {
  // targeting our image then animating it down by 100 px
  $('img').animate({top:'+=100px'},1000);
});
```
## Introducing jQuery UI
All right! Time to blaze new jQuery trails with a new jQuery library: jQuery UI.
jQuery UI includes a number of ultra-fancy animations you can use to make your websites do incredible things.

For instance, remember when we lamented that jQuery didn't include a `.blowUp()` effect for our planet Krypton? Well, that's still true. But jQuery UI has an `.effect()` effect, and we are totally going to give it the input 'explode'.

### Instructions 3 / 14
In the script.js tab, get your document .ready() and pass in a .click() event handler on your 'div'. Inside that, call .effect() on your div and give it the input 'explode'. Head over to the Result tab and click on Krypton to watch it explode!

```javascript
// pass in a .click() event handler on your 'div'. Inside that, call .effect() on your div and give it the input 'explode'
$(document).ready(function() {
  // click event
  $('div').click(function(){
    // effect of explode happens when we click on div
    $('div').effect('explode');
  });
});
```
## .bounce
Cool, right? But we can do much more than just blow things up.

Another possible effect is 'bounce'. We give this as an input to `.effect()` just like 'explode', but we add an extra input to tell it how many times to bounce. This code will make our target 'div' bounce twice in 200 milliseconds:

```javascript
$('div').effect('bounce',{times:2},200);
```
### Instructions 4 / 14
Change your 'explode' to a bounce, and make it so Krypton bounces three times in 500 milliseconds when you click on it.

```javascript
$(document).ready(function() {
  // click function
  $('div').click(function(){
    // bounce effect happens when you click on the div
    $('div').effect('bounce',{times:3},500);
  });
});
```

## .slide()
We can also make Krypton `.slide()` into view. Not surprisingly, we do this by calling the `.effect()` effect function and passing in 'slide' as an input.

If you want to see everything jQuery UI can do, you can check out the documentation here!


### Instructions 5 / 14
Change your 'bounce' to a 'slide', and remove the other two inputs.

```javascript
$(document).ready(function() {
  // click function
  $('div').click(function(){
    // slide effect happens when you click on the div
    $('div').effect('slide');
  });
});
```
## Special Effects
The `.effect()` effect has all kinds of magical goodness in it, but it's not the most amazing thing jQuery UI can do. The library has a number of built-in effects that can make your website look sleek and professional with surprisingly little code.

Check out the code in script.js, and head on over to the Result tab to see what jQuery UI can do for you. Be sure to click each accordion section!

```javascript
// accordion effect
$(document).ready(function() {
  // finding our #accordion id and assigning it the accordion function
  $('#accordion').accordion({collapsible:true});
});
```

## Drag racing
jQuery UI includes a `.draggable()` function that can make any HTML element draggable—you can click on it and move it anywhere on the page!

We thought you might be tired of <div> blocks, so we made you a CSS car. We worked super hard on it.

### Instructions 7 / 14
Call the `.draggable()` function on '#car'. Click Save & Submit Code, then go to the Result tab and drag your car around the page!

```javascript
// draggable car!
$(document).ready(function() {
  // calling the draggable function on #car
  $('car').draggable();
});
```
## One Resize Fits All
You didn't love our mega sweet car? We slaved over that for months! Back to regular <div>s for you!


### Instructions 8 / 14
Call the .resizable() function on your 'div'. Click Save & Submit Code, then go to the Result tab and resize your <div> to your heart's content!

```javascript
$(document).ready(function() {
  // resizable box
  $('div').resizable();
});
```

## A Greater Selection
Images an `<div>`s aren't the only elements we can target with jQuery UI—we can also enhance our ordered and unordered lists.

Check out the HTML in `index.html`. We've set up a pretty nifty ordered list, but when it shows up in the Result tab, it's a little bland. With jQuery UI, we can fix that!

### Instructions 9 / 14
In the script.js tab, get your document .ready() and call the .selectable() function on your 'ol'. Click Save & Submit Code, then click on the list items in your ordered list in the Result tab to see how much sleeker it looks.

```javascript
$(document).ready(function() {
  // call the .selectable() function on your 'ol'
  $('ol').selectable();
});
```

## Lets sort things out
Lists are great, and jQuery UI makes them greater. While selecting is cool, it doesn't necessarily make our list as dynamic as we'd like—what if we want to reorder the elements in our list?

### Instructions 10 / 14

Replace your .selectable() with a .sortable(). Click Save & Submit Code, then rearrange your list items as you see fit!

```javascript
$(document).ready(function() {
  // call the .selectable() function on your 'ol'
  $('ol').sortable();
});
```
## jQuery UI, is There Anything You Can't Do?
All right! Time to use jQuery UI to create that awesome-looking accordion-style dropdown menu we saw in the last section. For this, we'll be using jQuery UI's built-in .accordion() function.

First, however, we'll need some additional HTML elements.

### Instructions 11 / 14
We got you started in the `index.html` tab, but a menu's no good with only one section! Add two more like the first one. They should go inside the '#menu' div but after the "Section 1" div.

```html
<div id="menu">
        <h3>Section One</h3>
    <div>
        <p>I am the first section</p>
    </div>
        <h3>Section Two</h3>
    <div>
        <p>I am the second section</p>
    </div>
        <h3>Section Three</h3>
    <div>
        <p>I am the third section</p>
    </div>
</div>
```
### Instructions 12 / 14
Get your document ready!

```javascript
$(document).ready(function() {
});
```
## Break Out Your .accordion()!

```javascript
$(document).ready(function() {
    $('#menu').accordion();
});
```

## Victory!
Now go make something cool!

#Intro
We have discussed four data types: *numbers, strings, booleans and arrays.*

In this lesson, we focus on a fifth data type: objects. This data type is a little bit more complex. Objects allow us to *represent* in code *real world things and entities* (such as a person or bank account). We do this by storing all relevant information in one place—an object.

How do we create an object? Like *declaring a variable*, or defining a function, we use *var*, followed by the name of the object and an equals sign. Each object then:

1. starts with `{`
2. has information inside
3. ends with `};`

###Instructions 
Create an object named bob that has no information inside the brakets

```javascript
// create an object named bob
```

##Properties
Let's review what we previously covered. Each piece of information we include in an object is known as a *property*. Think of a *property* like a *category label* that belongs to some object. When creating an object, each **property** has a **name**, followed by `:` and then the **value** of that property. For example, if we want Bob's object to show he is 34, we'd type in `age: 34`

`age`is the **property**, and `34` is the value of this property. When we have more than one property, they are separated by commas. The last property does not end with a comma.

###Instructions
Create an object called `me` that describes your age and which country you live in?

```javascript
var Spencer = {
  age: 22,
  country: "United States"
};

// create me! 

```
##Accessing Properties
Now that we know how to make objects with properties, let's look at how we actually use them!

Notice our example objects `bob` and `susan`. In this case both `bob` and susan each have two properties, `name` and `age`.

After creating our objects we have added code to access these properties. Notice that we save bob's name, "Bob Smith", into the global variable name1. We do this in line 10.    

###Instructions
Notice our example objects `bob` and `susan`. In this case both bob and susan each have two properties, `name` and `age`.

After creating our objects we have added code to access these properties. Notice that we save bob's `name`, "Bob Smith", into the *global variable* `name1`.

```javascript
var bob = {
  name: "Bob Smith",
  age: 30
};
var susan = {
  name: "Susan Jordan",
  age: 25
};
// here we save Bob's information
var name1 = bob.name;
var age1 = bob.age;
// finish this code by saving Susan's information
var name2 =
var age2 =

```

## Accessing Properties, Part 2
In the last exercise, we accessed properties using what is known as *dot notation*. Good name, right? So to access a property, we use `ObjectName.PropertyName` (e.g., bob.name)

In addition to dot notation, we can also access properties using *bracket notation.* In this case we use `ObjectName["PropertyName"]` to access the desired property. Note, we need " " around the property's name. 

Take a look at our next example object called `dog`. Notice on line 8 how we save the dog's `species` into a variable by accessing the species property of dog using bracket notation. 

###Instructions
Use bracket notation to save the dog's weight and age into variables as well.

```javascript
// Take a look at our next example object, a dog
var dog = {
  species: "greyhound",
  weight: 60,
  age: 4
};

var species = dog["species"];
// fill in the code to save the weight and age using bracket notation
var weight =
var age =
```
##Another Way to Create
The method we've used to create objects uses *object literal* notation—that is, creating a *new object* with { } and defining properties within the brackets.

Another way of creating objects **without** using the curly brackets { } is to use the keyword `new`. This is known as creating an object using a *constructor*.

The new keyword creates an empty object when followed by `Object()` the gernal syntax is:

`var objectName = new Object();`

We then must fill this object with properties and labels.
How do we do that? Check out the creation of the object `bob` to see what we do. We create the name property for the object `bob` by using `bob.name` and assigning that to a value. Contrast this to how we define properties in lines 6-7 for the `susan1` object.

```javascript
// Our bob object again, but made using a constructor this time 
var bob = new Object();
bob.name = "Bob Smith";
bob.age = 30;
// Here is susan1, in literal notation
var susan1 = {
  name: "Susan Jordan",
  age: 24
};
// Make a new susan2 object, using a constructor instead
```
**Result**
`> "Susan Jordan"`
`> 24`

##Putting it all together
We've learned how to make objects in two different ways. Both are valid, and you can use which one you prefer.

###Instructions
Use literal notation to finish the `snoopy` object. Remember literal notation is the one where we fill in `{ }` with separate properties and values with colons. Each property is separated by a comma.

snoopy should have two properties, a species of "beagle" and age of 10.

Then make buddy, a 5 year-old golden `retriever, using constructor notation. This notation involves using the key word new to create an empty object. Then we fill it in using dot notation.

```javascript
// help us make snoopy using literal notation
// Remember snoopy is a "beagle" and is 10 years old.
var snoopy =

// help make buddy using constructor notation
// buddy is a "golden retriever" and is 5 years old
var buddy =
```

##More practice! Yay! 
Nice job! Let's do one more example to get the hang of making objects with desired properties.

###Instructions
Create an object named 'bicycle' that has 3 properties: `speed` of `0` `gear` of `1` `frame_material` of "carbon"

```javascript
// make me a bike please! 
var bike = {
prop1:..;
prop2:..;
};
```
##Function Review
In this lesson we are going to focus on **methods.** Methods are an important part of *object oriented programming* (OOP). OOP is an important part of programming which we'll dive into later.

Methods are similar to functions. To prepare for methods, let's do a quick refresher on functions.
Functions are defined using the *function* keyword followed by:

1. pair of parentheses ( ) with optional parameters inside.
2. pair of curly braces with the function's code inside { }.
3. A semicolon ;.

And when we call/invoke the function, we can put inputs (arguments) for the parameters.

For example, the square function on line 2 takes x as its parameter and returns that parameter squared.

###Instructions 
Define the function `multiply`. It should take two parameters, `x` and `y`, and return the product.

Then call your function, passing in any two arguments.

```javascript
var square = function (x){
  return x * x;
}

// Write the function multiply below
// It should take two parameters and return the product

```
Now write my own function called multiply below
It should take two parameters and return the product.

##What is a method?

In the last section, we discussed properties. We can think of properties as *variables* associated with an object. Similarly, a *method* is just like a *function associated with an object*.

```javascript 
var bob = new Object();
bob.name = "bob smith";
bob.age = 30;
// adding a method
bob.setAge = function (newAge){
  bob.age = newAge;
};
```

Let's look at `bob`, our same person object from the last lesson. Instead of just having the properties name and age (line 3 & 4), bob also has a **method** called `setAge` (line 6). As you can probably guess, this method sets bob's age to whatever argument you give it.

Notice how we *define* `setAge` kind of like we define a property. The big difference is that we put in a *function* after the equals sign instead of a string or number.

We **call** a **method** like a function, but we use `ObjectName.methodName()`. Look at line 10 where we use the method to change bob's age to 40. We did this by calling `bob.setAge(40);`.


###Instructions
Try it yourself! Use the method setAge to set bob's age to 20.

```javascript
// here is bob again, with his usual properties
var bob = new Object();
bob.name = "Bob Smith";
bob.age = 30;
// this time we have added a method, setAge
bob.setAge = function (newAge){
  bob.age = newAge;
};
// here we set bob's age to 40
bob.setAge(40);
// bob's feeling old.  Use our method to set bob's age to 20
```

##Why are methods important? 
Methods serve **several** important purposes when it comes to objects.

1.They can be used to change object property values. The method setAge on line 4 allows us to update bob.age.

2.They can be used to make *calculations* based on *object properties*. Functions can only use parameters as an input, but methods can make *calculations with object properties*. For example, we can calculate the year `bob` was born based on his age with our `getYearOfBirth` method

###Instructions
Find out what year bob was born in and move onto the next exercise, where we will learn more about how to make methods.

```javascript
bob.age = 17;
// setAge is our first method
bob.setAge = function (newAge){
  bob.age = newAge;
};

bob.setAge();
// getYearOfBirth is our second method
bob.getYearOfBirth = function (){
  // returning 2014 and then subtracting it by 17 which is bobs age
  return 2014 - bob.age;
};
// Calling our getYearOfBirth
bob.getYearOfBirth();
};
console.log(bob.getYearOfBirth());
```
##This key word

Our `setAge` method works great for bob because it updates `bob.age`, but what if we want to use it for other people?

It turns out we can make a method work for *many objects* using the keyword `this` which  acts as a placeholder, and will **refer to whichever object called that method** when the method is actually used.

Let's look at the method `setAge` to see how this works. By using the keyword `this`, `setAge` will *change the age property of any object that calls it*. Previously, we had a specific object `bob` instead of the keyword `this`. But that limited the use of the method to just `bob`.

To sum it up in one sentence..
`this` is a **placeholder** and will *refer* to whichever object that calls it. 

Here we define our method using `this` before we even introduce bob

```javascript
var setAge = function (newAge){
  this.age = newAge;
  // `this` is referencing the `age` property
};
```
Now we need to make bob

```javascript
var bob = new Object();
bob.age = 30;
```
Then when we say `bob.setAge = setAge;`, it means whenever we type `bob`.`setAge( )`, `this.age` in the `setAge` method will refer to THE `bob.age`

`bob.setAge = setAge;`

###Instructions
To show this way of making setAge works just like the one in exercise 2, use bob's setAge method to change his age to 50.

```javascript
// here we define our method using "this", before we even introduce bob
var setAge = function (newAge) {
  this.age = newAge;
};
// now we make bob
var bob = new Object();
bob.age = 30;
// and down here we just use the method we already made
bob.setAge = setAge;
  
// change bob's age to 50 here

``

## "This" works for everyone

Great! Now we can take advantage of the fact that the method `setAge` is not limited to a single object `bob` so we can *reuse* the same method for different objects! This allows us to avoid typing out a custom method each time. All because we used the *placeholder* `this`.

In the editor, we have the same code as last time, where we define setAge using `this`. We then set `bob.setAge = setAge;`. But this time we will reuse the setAge method for susan as well.

###Instructions 
Make susan on lines 11-13, who should initially have an age of 25 and a `susan.setAge` method also equal to `setAge`.

Then use `susan.setAge(35);` to set susan's age to 35.

```javascript
// Method
var setAge = function (newAge){
  // `this` is using our age property as a placeholder 
  this.age = newAge;
};

// Bob Object
var bob = new Object();
bob.age = 30;
// asking bob.setAge go look for the setAge method
bob.setAge = setAge; 

// make susan here, and first give her an age of 25

// here, update Susan's age to 35 using the method
```
## Make your own method
Here we have defined an object `rectangle`. It has a two properties, `height` and `width`, which represents the height and width of the shape.

We have written a `setHeight` method which will update `rectangle` `height` to the given parameter. This is very similar to setAge from our person example.

Note we have used the keyword `this`.`this` is still a placeholder, but in this scenario, `this` can only ever refer to `rectangle` because we defined `setHeight` to be explicitly part of `rectangle` by defining it as `rectangle.setHeight`.


###Instructions
Finish the method `setWidth`. It should take a parameter `newWidth`. It will change the property width to the given parameter.

Then use the two methods setHeight and setWidth to change rectangle's height to 6 and width to 8.

```javascript
var rectangle = new Object();
rectangle.height = 3;
rectangle.width = 4;

// here is our method to set the height
rectangle.setHeight = function (newHeight) {
  this.height = newHeight;
};

// help by finishing this method
rectangle.setWidth = 

    
// here change the width to 8 and height to 6 using our new methods
```

##More kinds of methods
Let's look at another method that calculates useful information about an object.

Here we have an object `square` with a `sideLength` property to represent the length of the square's side. This time, we have added a new method, `calcPerimeter`, which computes the perimeter of the square. Notice we make use of the keyword `return`.

```javascript
var square = new Object();
square.sideLength = 6;
square.calcPerimeter = function() {
  return this.sideLength * 4;
};
// 
// define a method called calcArea which then returns the area of sqaure in the terms of sideLength

// in calcArea we are returning this.sideLength back to it's original self to get the calculation of the area.

var p = square.calcPerimeter();
var a = square.calcArea();
```

#Construction Junction

##The object constructor
We mentioned the term **constructor** back in section one, when we talked about making an object using the *keyword* `new`. A *constructor* is a way to create an object.

When we write `bob = new Object( );` we are using a built-in constructor called `Object`. This constructor is already defined by the javascript language and just makes an object with no properties or methods.

This means we have to add our properties one at a time, just like we've been doing. To review, we've created bob using the constructor and defined the name property for you.

###Instructions
Finish making `bob` by defining the `age` property and setting it equal to 20

```javascript
var bob = new Object();
bob.name = "Bob Smith";
//add bobs age here and set it equal to 20 
```
##Custom Constructors
But this approach of adding in properties one at a time for every object is tedious! Instead of always using the boring Object constructor, we can make our own constructors.

This way we can set the properties for an object right when it is created. So *instead of using the `Object` *constructor* which is empty and has no properties, we can make our own constructors which have properties.

To see how this works, look at our `Person` constructor in lines 1–4. This *constructor* is used to make *Person* objects. Notice it uses the keyword `this` to define the name and age properties and set them equal to the parameters given.

Now we can use this constructor to make our good friends `bob` and `susan` in only one line each! Look at lines 7–8: once we have the constructor, it's way easier to make people because we can include their name and age as arguments to their respective constructors.

###Instructions
Practice using the constructor to make a new `Person` called george, whose full name is "George Washington" and age is `275`.


```javascript
function Person(name,age) {
  this.name = name;
  this.age = age;
}

// Let's make bob and susan again, using our constructor
var bob = new Person("Bob Smith", 30);
var susan = new Person("Susan Jordan", 25);
// help us make george, whose name is "George Washington" and age is 275
```

##Try it out
Let's look at another example and practice coding constructors. Here we have made a `Cat` constructor for you, with age and color properties.

Why is this `Cat` constructor so cool? It means if we have *many* cats and wanted to *create an object* for each `Cat`, we could just use this constructor with the properties already defined.

This is much better than using the `Object` constructor which just gives us an empty object and needs us to define every property and value for each cat object we would create.

###Instructions
Finish the Dog constructor we have started on line 7. You can include whatever parameters and properties you want (age, name, breed, whatever you can think of!) Use the Cat constructor as an example.

```javascript
function Cat(age, color) {
  this.age = age;
  this.color = color;
}

// make a Dog constructor here
function Dog(

```
##More options
In a constructor, we don't have to define all the properties using parameters. Look at our new `Person` example on line 1, and see how we set the species to be `"Homo Sapiens"` (line 4). This means that when we create any Person, their species will be `"Homo Sapiens"`. In this way, the values associated with `name` and `age` are not yet assigned, but species will always have the same value.

In this case, both `sally` and `holden` will have the same species of `"Homo Sapiens"`, which makes sense because that is the same across all people.

###Instructions
Create a new object called `sally` using the `Person` constructor. Her name is "Sally Bowles" and she is 39. Create another object called `holden`. His name is "Holden Caulfield" and he is 16.

Edit the sentence printed out such that it includes the age of `sally` and `holden` respectively.

```javascript

function Person(name,age) {
  this.name = name;
  this.age = age;
  this.species = "Homo Sapiens";
}

var sally = 
var holden = 
console.log("sally's species is " + sally.species + " and she is " + );
console.log("holden's species is " + holden.species + " and he is " + );
```

##Constructors With Methods
In addition to setting properties, constructors can also define methods. This way, as soon as the object is created it will have its own methods as well.

Here we have a `Rectangle` constructor, which sets the height and width properties equal to the arguments, just like our Person did with name and age.

Notice we have added a calcArea method. This calculates the area of the rectangle in terms of its height and width.

Line 11 creates a new object rex which makes use of the constructor. You can see how rex calls the calcArea method in line 12 and saves the result in a variable, area.

###Instructions
Define a new method on line 8, calcPerimeter, which calculates and returns the perimeter for a Rectangle in terms of height and width.

```javascript
function Rectangle(height, width) {
  this.height = height;
  this.width = width;
  this.calcArea = function() {
      return this.height * this.width;
  };
  // put our perimeter function here!
  
}

var rex = new Rectangle(7,3);
var area = rex.calcArea();
var perimeter = rex.calcPerimeter();
```
##Constructors in review
Constructors are a way to make objects with the keyword `new`. The most basic constructor is the `Object` constructor, which will make an object with no methods or properties.

For more complicated objects we can make our own constructors and put in whatever properties and methods we want.

Check out our example to the bellow to see objects in action. Our `Rabbit` **constructor** defines an adjective property and a `describeMyself` **method**.

Recall how these kind of custom constructors are important because they allow us to easily make many similar objects.

###Instructions
Create a new object `rabbit1` with the adjective "fluffy", a new object `rabbit2` with the `adjective` "happy", and a new object `rabbit3` with the adjective "sleepy".

Use the method `describeMyself` to print out in the console a sentence about each object you just created!


```javascript
// Constructor

function Rabbit (adjective){
  this.adjective = adjective;
  // Method
  this.describeMySelf = function (){
    console.log("I am a " + this.adjective + "Rabbit");
    };
  }
  
  // now we can easily make all of our rabbits

  //rabbit1

  //rabbit2

  //rabbit3

```
##Arrays of Objects
Remember that an **object** is just another **type**, like a **string** or **number** but more complex. This means that just as we can make arrays of numbers and strings, we can also make arrays of objects.

Here we have our `Person` **constructor** which should look familiar. We can use this constructor to make an **array** of `Person` objects, similar to how we might make an array of numbers but filling in people instead.

###Instructions
Add one more `Person` to the `famil` array, "timmy", who is 6 years old.


```javascript
// Our person constructor
function Person (name, age) {
    this.name = name;
    this.age = age;
}

// Now we can make an array of people
var family = new Array();
family[0] = new Person("alice", 40);
family[1] = new Person("bob", 42);
family[2] = new Person("michelle", 8);

// add the last family member, "timmy", who is 6 years old

```

###Loop the loop
Arrays filled with objects will work just like arrays filled with numbers and strings.

In the same way we may loop through an array of numbers to print them out or calculate a sum, we can loop through an array of objects and access properties or methods.

###Instructions
1. Write a person constructor called Person that has two properties (name and age).

2. Create an empty array called `family`.

3. There will be four objects in the array. Using your `Person` constructor, create the four objects and put them in the array. The order of the objects are:

`"alice"` who is `40`
`"bob"` who is `42`
`"michelle"` who is `8`
`"timmy"` who is `6`

4. Create a for-loop that loops through the `family` array and prints out the name property for each family member in order of creation.

```javascript
// Our Person constructor


// Now we can make an array of people


// loop through our new array

```

###Passing Objects into Functions
In addition to making **arrays of Objects**, we can use objects as **parameters for functions** as well. That way, these functions can take advantage of the **methods** and properties that a certain object type provides.

In addition to our `Person` constructor we have introduced a new `function`, `ageDifference` (line 9). This function takes two `Person` objects as parameters, and `returns` the difference in age between the two people.

Notice we would be in trouble here if we tried to call `ageDifference` and passed in strings instead of people, because strings don't have an age property. But because we know from our *constructor that all Person objects will have an age property, we can pass any Person into* `ageDifference`. We must be careful not to pass anything but Person objects into `ageDifference`.

###Instructions

We have created two example people, `alice` and `billy`. Complete line 17 by calling `ageDifference` and saving the result in our global `diff `variable.

```javascript
/*In addition to making arrays of Objects, we can use objects as parameters for functions as well. That way, these functions can take advantage of the methods and properties that a certain object type provides.*/

// Person Constructor 
function Person (name,age){
  this.name = name;
  this.age = age;
}

// a function that takes persons as arguments
// `ageDifferance` computes the differance in ages between two people

// ageDifference takes two `person` objects and as parameters and returns the differance in age between the two people

var ageDifference = function (person1,person2) {
  return person1.age - person2.age;
};

// two `person` objects 
// we can pass any person into ageDifference

var alice = new Person("Alice",30);
var billy = new Person ("Billy",25);

// now call ageDifference by saving the result in our global diff variable

var diff = 

```

##Try it out 
This time try making your own function that takes objects as parameters!

Here we have given you the `Person` constructor again, along with the `ageDifference` function as an example.

Now create a new function, `olderAge`. It should take two `Person` objects as parameters, and return the age of whatever Person is older.

For example, with 30 year-old alice and 25 year-old bob, `olderAge(alice, bob);` should return 30, because that is alice's age and she is older than bob. If the two people have the same age then you can return that age.

##Instructions
Define a function called `olderAge`. We want the function to return the age of the person who is older.

```javascript
// Our person constructor
function Person (name, age) {
    this.name = name;
    this.age = age;
}

// We can make a function which takes persons as arguments
// This one computes the difference in ages between two people
var ageDifference = function(person1, person2) {
    return person1.age - person2.age;
};

// Make a new function, olderAge, to return the age of
// the older of two people


// Let's bring back alice and billy to test our new function
var alice = new Person("Alice", 30);
var billy = new Person("Billy", 25);

console.log("The older person is " + olderAge(alice, billy));

```

##What are objects for? 
Objects provide us with a way to represent *real-world or virtual things.* We can do this by storing information inside the **object's properties.** There are two basic ways to make objects:

###Literal Notation
where you use
`var name = {..}`

```javascript
var brent = {
    age: 24,
    home: "North Shore"
};
```

###Constructor Notation
where you use `new`
 
```javascript 
var brent = new Object();
brent.age = 22;
brent.home = "North Shore";
```

###Properties
Properties are like variables that belong to an object, and are used to hold pieces of information. Properties can be accessed in two ways

####Dot Notation
`ObjectName.PropertyName`

####Bracket Notation
`ObjectName["PropertyName"]` 
You need quotes! 

```javascript
var snoopy = new Object();
snoopy.species = "beagle";
snoopy.age = 10;

// save Snoopy's age and species into variables
// use dot notation for snoopy's species
var species = snoopy.species

// use bracket notation for snoopy's age
var age = snoopy["age"];
```
###Customizing Constructors
In addition to the basic `Object` constructor, we can define our own custom constructors. These are helpful for two reasons:

We can assign our objects properties through parameters we pass in when the object is created.

We can give our objects methods automatically.
These both work to save us time and lines of code when we make objects.

###Instructions
Notice that without the constructor, it takes us 3 lines of code to make `harry_potter`, an object that represents Harry Potter book 1.

Then in line 7 we introduce a constructor for a `Book` object, where we pass in the `pages` and `author` properties as parameters.

Use this constructor to make `the_hobbit`, a book with `320` pages by `"J.R.R. Tolkien"`. Notice by using the constructor you can do this in only one line instead of three!

```javascript
// 3 lines required to make harry_potter
var harry_potter = new Object();
harry_potter.pages = 350;
harry_potter.author = "J.K. Rowling";

// A custom constructor for book
function Book (pages, author) {
    this.pages = pages;
    this.author = author;
}
// Use our new constructor to make the_hobbit in one line
```

###Methods
**Methods** are like functions that are associated with a particular object.

They are especially helpful when you want to either:

1. Update the object properties
2. Calculate something based on an object's properties.

Here, we have included a `Circle` object, with a `radius` property representing the circle's radius. We have implemented an `area` function which calculates the circle's area. Notice we have used Math.PI to get the π value.

###Instructions
Define a method perimeter that calculates the perimeter of a circle.
The formula for the perimeter of a circle is 2 * π * radius.

```javascript
function Circle (radius) {
    this.radius = radius;
    this.area = function () {
    return Math.PI * this.radius * this.radius;
    };
    // define a perimeter method here
    
```



